[
    {
        "label": "os,sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.sys",
        "description": "os.sys",
        "detail": "os.sys",
        "documentation": {}
    },
    {
        "label": "stack",
        "importPath": "stacks",
        "description": "stacks",
        "isExtraImport": true,
        "detail": "stacks",
        "documentation": {}
    },
    {
        "label": "Element",
        "importPath": "stacks",
        "description": "stacks",
        "isExtraImport": true,
        "detail": "stacks",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "Element",
        "kind": 6,
        "importPath": "01-stacks-Python.stacks",
        "description": "01-stacks-Python.stacks",
        "peekOfCode": "class Element(object):\n    def __init__(self, value):\n        self.value = value\n        self.next = None\nclass LinkedList(object):\n    def __init__(self, head=None):\n        self.head = head\n    def append(self, new_element):\n        current = self.head\n        if self.head:",
        "detail": "01-stacks-Python.stacks",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "01-stacks-Python.stacks",
        "description": "01-stacks-Python.stacks",
        "peekOfCode": "class LinkedList(object):\n    def __init__(self, head=None):\n        self.head = head\n    def append(self, new_element):\n        current = self.head\n        if self.head:\n            while current.next:\n                current = current.next\n            current.next = new_element\n        else:",
        "detail": "01-stacks-Python.stacks",
        "documentation": {}
    },
    {
        "label": "stack",
        "kind": 6,
        "importPath": "01-stacks-Python.stacks",
        "description": "01-stacks-Python.stacks",
        "peekOfCode": "class stack(object):\n    def __init__(self,top=None):\n        self.ll = LinkedList(top)\n    def push(self, new_element):\n        \"Push (add) a new element onto the top of the stack\"\n        self.ll.insert_first(new_element)\n    def pop(self):\n        \"Pop (remove) the first element off the top of the stack and return it\"\n        self.ll.delete_first()",
        "detail": "01-stacks-Python.stacks",
        "documentation": {}
    },
    {
        "label": "test_pop1",
        "kind": 2,
        "importPath": "01-stacks-Python.test_solution",
        "description": "01-stacks-Python.test_solution",
        "peekOfCode": "def test_pop1(result):    \n    assert stack.pop().value == result\n@pytest.mark.parametrize(\"result\",[(None)])\ndef test_pop2(result):    \n    assert stack.pop() == result\n@pytest.mark.parametrize(\"result\",[(4)])\ndef test_pop3(result):\n    stack.push(e4)    \n    assert stack.pop().value == result",
        "detail": "01-stacks-Python.test_solution",
        "documentation": {}
    },
    {
        "label": "test_pop2",
        "kind": 2,
        "importPath": "01-stacks-Python.test_solution",
        "description": "01-stacks-Python.test_solution",
        "peekOfCode": "def test_pop2(result):    \n    assert stack.pop() == result\n@pytest.mark.parametrize(\"result\",[(4)])\ndef test_pop3(result):\n    stack.push(e4)    \n    assert stack.pop().value == result",
        "detail": "01-stacks-Python.test_solution",
        "documentation": {}
    },
    {
        "label": "test_pop3",
        "kind": 2,
        "importPath": "01-stacks-Python.test_solution",
        "description": "01-stacks-Python.test_solution",
        "peekOfCode": "def test_pop3(result):\n    stack.push(e4)    \n    assert stack.pop().value == result",
        "detail": "01-stacks-Python.test_solution",
        "documentation": {}
    },
    {
        "label": "e1",
        "kind": 5,
        "importPath": "01-stacks-Python.test_solution",
        "description": "01-stacks-Python.test_solution",
        "peekOfCode": "e1 = Element(1)\ne2 = Element(2)\ne3 = Element(3)\ne4 = Element(4)\n# Start setting up a Stack\nstack = stack(e1)\n# Test stack functionality\nstack.push(e2)\nstack.push(e3)\n@pytest.mark.parametrize(\"result\",[(3),(2),(1)])",
        "detail": "01-stacks-Python.test_solution",
        "documentation": {}
    },
    {
        "label": "e2",
        "kind": 5,
        "importPath": "01-stacks-Python.test_solution",
        "description": "01-stacks-Python.test_solution",
        "peekOfCode": "e2 = Element(2)\ne3 = Element(3)\ne4 = Element(4)\n# Start setting up a Stack\nstack = stack(e1)\n# Test stack functionality\nstack.push(e2)\nstack.push(e3)\n@pytest.mark.parametrize(\"result\",[(3),(2),(1)])\ndef test_pop1(result):    ",
        "detail": "01-stacks-Python.test_solution",
        "documentation": {}
    },
    {
        "label": "e3",
        "kind": 5,
        "importPath": "01-stacks-Python.test_solution",
        "description": "01-stacks-Python.test_solution",
        "peekOfCode": "e3 = Element(3)\ne4 = Element(4)\n# Start setting up a Stack\nstack = stack(e1)\n# Test stack functionality\nstack.push(e2)\nstack.push(e3)\n@pytest.mark.parametrize(\"result\",[(3),(2),(1)])\ndef test_pop1(result):    \n    assert stack.pop().value == result",
        "detail": "01-stacks-Python.test_solution",
        "documentation": {}
    },
    {
        "label": "e4",
        "kind": 5,
        "importPath": "01-stacks-Python.test_solution",
        "description": "01-stacks-Python.test_solution",
        "peekOfCode": "e4 = Element(4)\n# Start setting up a Stack\nstack = stack(e1)\n# Test stack functionality\nstack.push(e2)\nstack.push(e3)\n@pytest.mark.parametrize(\"result\",[(3),(2),(1)])\ndef test_pop1(result):    \n    assert stack.pop().value == result\n@pytest.mark.parametrize(\"result\",[(None)])",
        "detail": "01-stacks-Python.test_solution",
        "documentation": {}
    },
    {
        "label": "stack",
        "kind": 5,
        "importPath": "01-stacks-Python.test_solution",
        "description": "01-stacks-Python.test_solution",
        "peekOfCode": "stack = stack(e1)\n# Test stack functionality\nstack.push(e2)\nstack.push(e3)\n@pytest.mark.parametrize(\"result\",[(3),(2),(1)])\ndef test_pop1(result):    \n    assert stack.pop().value == result\n@pytest.mark.parametrize(\"result\",[(None)])\ndef test_pop2(result):    \n    assert stack.pop() == result",
        "detail": "01-stacks-Python.test_solution",
        "documentation": {}
    }
]