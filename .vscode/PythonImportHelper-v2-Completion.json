[
    {
        "label": "os,sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.sys",
        "description": "os.sys",
        "detail": "os.sys",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "importPath": "binarysearch",
        "description": "binarysearch",
        "isExtraImport": true,
        "detail": "binarysearch",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "binary_search",
        "kind": 2,
        "importPath": "02-binarysearch-Python.binarysearch",
        "description": "02-binarysearch-Python.binarysearch",
        "peekOfCode": "def binary_search(input_array, value):\n     # search space is `A[leftâ€¦right]`\n    (left, right) = (0, len(input_array) - 1)\n    # loop till the search space is exhausted\n    while left <= right:\n        # find the mid-value in the search space and\n        # compares it with the target\n        mid = (left + right) // 2\n        # overflow can happen. Use:\n        # mid = left + (right - left) / 2",
        "detail": "02-binarysearch-Python.binarysearch",
        "documentation": {}
    },
    {
        "label": "test_binary_search",
        "kind": 2,
        "importPath": "02-binarysearch-Python.test_solution",
        "description": "02-binarysearch-Python.test_solution",
        "peekOfCode": "def test_binary_search(input_array, value, result):    \n    assert binary_search(input_array,value) == result",
        "detail": "02-binarysearch-Python.test_solution",
        "documentation": {}
    },
    {
        "label": "test_list",
        "kind": 5,
        "importPath": "02-binarysearch-Python.test_solution",
        "description": "02-binarysearch-Python.test_solution",
        "peekOfCode": "test_list = [1,3,9,11,15,19,29]\n@pytest.mark.parametrize(\"input_array, value, result\",[(test_list, 25, -1), (test_list, 15, 4)])\ndef test_binary_search(input_array, value, result):    \n    assert binary_search(input_array,value) == result",
        "detail": "02-binarysearch-Python.test_solution",
        "documentation": {}
    }
]